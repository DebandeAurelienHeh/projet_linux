#!/usr/bin/env python3
from flask import Flask, render_template
import psutil, time, os, subprocess
from ping3 import ping

# Flask va chercher les templates dans /monitoring
app = Flask(__name__, template_folder="/monitoring")

HOSTS = {
    "serv-app":  "10.42.0.191",
    "serv-file": "10.42.0.144"
}

SERVICES = ["httpd", "mariadb", "smb", "nfs-server"]

def check_hosts():
    results = {}
    for name, ip in HOSTS.items():
        delay = ping(ip, timeout=1)
        results[name] = {
            "status": "OK" if delay and delay>0 else "DOWN",
            "delay": delay
        }
    return results

def check_services():
    results = {}
    for svc in SERVICES:
        r = subprocess.run(
            ["systemctl", "is-active", svc],
            capture_output=True, text=True
        )
        results[svc] = r.stdout.strip()
    return results

def system_metrics():
    # Load averages
    load1, load5, load15 = os.getloadavg()
    # CPU per core
    cpu_perc = psutil.cpu_percent(percpu=True)
    # Memory
    vm = psutil.virtual_memory()
    swap = psutil.swap_memory()
    # Disks
    disks = []
    for part in psutil.disk_partitions(all=False):
        usage = psutil.disk_usage(part.mountpoint)
        disks.append({
            "mount": part.mountpoint,
            "total": usage.total,
            "used": usage.used,
            "free": usage.free,
            "percent": usage.percent
        })
    # Uptime
    boot = psutil.boot_time()
    uptime = time.time() - boot
    return {
        "load": (load1, load5, load15),
        "cpu_perc": cpu_perc,
        "memory": {"total": vm.total, "used": vm.used, "percent": vm.percent},
        "swap": {"total": swap.total, "used": swap.used, "percent": swap.percent},
        "disks": disks,
        "uptime": uptime
    }

@app.route("/")
def index():
    hosts    = check_hosts()
    services = check_services()
    sysm     = system_metrics()
    return render_template(
        "index.html",
        hosts=hosts,
        services=services,
        sysm=sysm,
        last=time.strftime("%Y-%m-%d %H:%M:%S")
    )

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000)
